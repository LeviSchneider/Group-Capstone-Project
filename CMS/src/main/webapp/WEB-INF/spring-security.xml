<!-- #1 - Make security the default namespace -->
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
 http://www.springframework.org/schema/security
 http://www.springframework.org/schema/security/spring-security-3.1.xsd">

    <beans:bean id="webexpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>
    
    <!-- #2 - Make sure we don’t need authorization to get to the login or home page -->
    <http pattern="/login" security="none" />
    <http pattern="/home" security="none" />
    <http pattern="/" security="none" />
    <http pattern="/css/**" security="none" />
    <http pattern="/js/**" security="none" />
    <http pattern="/img/**" security="none" />
    <!-- #3 - Authentication/login form and protected endpoint configuration -->
    <http auto-config="true" use-expressions="false">
        <!-- #3a - Login via html form, use Spring to do the security check -->
        <!-- #3b - Use the login page at this endpoint -->
        <!-- #3c - Redirect here if login fails -->
        <form-login login-processing-url="/j_spring_security_check"
                    login-page="/login"
                    authentication-failure-url="/login?login_error=1"/>
        <!-- #3d - Go back to home page when user logs out -->
        <logout logout-success-url="/home" />
       
        
        
        
        <!-- MOST strict to LEAST strict -->
<!-- Once we uncomment this we will have to login to access admin/editor functions -->


        <intercept-url pattern="/users" method="GET" access="ROLE_ADMIN" />
        <intercept-url pattern="/userRoles/{userId}" method="GET" access="ROLE_ADMIN" />
        <intercept-url pattern="/blogPost/{id}" method="DELETE" access="ROLE_ADMIN" />
        <intercept-url pattern="/category/{id}" method="DELETE" access="ROLE_ADMIN" />  
        <intercept-url pattern="/staticPage/{id}" method="DELETE" access="ROLE_ADMIN" />        
        <intercept-url pattern="/tag/{tagName}" method="DELETE" access="ROLE_ADMIN" />        
        <intercept-url pattern="/blogPostsAdmin" method="GET" access="ROLE_EDITOR" />        
        <intercept-url pattern="/blogPostsAdminUnpublished" method="GET" access="ROLE_EDITOR" />   
        <intercept-url pattern="/staticPagesAdminUnpublished" method="GET" access="ROLE_EDITOR" />
        <intercept-url pattern="/admin/**" method="GET" access="ROLE_EDITOR" />  
        <intercept-url pattern="/adminQuickChangeBlogPostStatus/**" method="PUT" access="ROLE_ADMIN" /> 
        <intercept-url pattern="/adminQuickChangeStaticPageStatus/**" method="PUT" access="ROLE_ADMIN" />                 
        <intercept-url pattern="staticPage/{id}/{position}" method="PUT" access="ROLE_ADMIN" /> 
        <intercept-url pattern="tag/{oldTagName}" method="PUT" access="ROLE_ADMIN" /> 
        <intercept-url pattern="/blogPostAdmin/{id}" method="GET" access="ROLE_EDITOR" /> 
        <intercept-url pattern="/tinymce" method="GET" access="ROLE_EDITOR" /> 
        <intercept-url pattern="/tinymce/{id}" method="GET" access="ROLE_EDITOR" /> 
        <intercept-url pattern="/pageTinyMCE" method="GET" access="ROLE_EDITOR" /> 
        <intercept-url pattern="/pageTinyMCE/{id}" method="GET" access="ROLE_EDITOR" /> 
        <intercept-url pattern="/blogPost" method="POST" access="ROLE_EDITOR" /> 
        <intercept-url pattern="/category" method="POST" access="ROLE_EDITOR" /> 
        <intercept-url pattern="/staticPage" method="POST" access="ROLE_EDITOR" /> 
        <intercept-url pattern="/tag/{postId}" method="POST" access="ROLE_EDITOR" /> 
        <intercept-url pattern="/blogPost/{id}" method="PUT" access="ROLE_EDITOR" />       
        <intercept-url pattern="/category/{id}" method="PUT" access="ROLE_EDITOR" />       
        <intercept-url pattern="/staticPage/{id}" method="PUT" access="ROLE_EDITOR" />       
                                               
 <!-- none of these are explicitly locked down or left, since they are public. 

/blogPost/{id}                                  PUBLIC	GET
/blogPosts/{startIndex}                         PUBLIC	GET
/link/{titleNumber}                             PUBLIC	GET
/taggedPosts/{tag}                              PUBLIC	GET
/category/{id}                                  PUBLIC	GET
/categories                                     PUBLIC	GET
/                                               PUBLIC	GET
/home                                           PUBLIC	GET
/blog                                           PUBLIC	GET
/articles                                       PUBLIC	GET
/staticPage/{id}                                PUBLIC	GET
/staticPages                                    PUBLIC	GET
/pagelink/{titleNumber}                         PUBLIC	GET
/sideBarLinks                                   PUBLIC	GET
/tags                                           PUBLIC	GET
/tags/{num}                                     PUBLIC	GET
/postTags/{postId}                              PUBLIC	GET
/login                                          PUBLIC  GET

        -->
    </http>
    <!-- #4 - Authentication Manager config -->
    <authentication-manager>
        <!-- #4a - Authentication Provider - we’re using the JDBC service -->
        <authentication-provider>
            <!-- #4b - Tells Spring Security where to look for user information -->
            <!-- We use the dataSource defined in spring-persistence.xml -->
            <!-- and we give Spring Security the query to use to lookup -->
            <!-- the user’s credentials (get the password from the users -->
            <!-- tables and get the roles from the authorities table) -->
            <jdbc-user-service id="userService"
                               data-source-ref="dataSource"
                               users-by-username-query=
 "select username, password, enabled from users where username=?"
                               authorities-by-username-query=
 "select username, authority from authorities where username=?" />
        </authentication-provider>
    </authentication-manager>
</beans:beans>
